[{"path":"oist.github.io/topcorneR/articles/PlateClasses.html","id":"wells","dir":"Articles","previous_headings":"","what":"Wells","title":"S4 classes for representing plates","text":"Well represents coordinates well plate given format (default, 384). Given coordinates, functions Row() Column() extract row column coordinates letters numbers respectively. Note plate formats names characters, numbers. well coordinates come plate format, possible determine “next” well.","code":"well <- Well(\"C14\") well |> Row() #> [1] \"C\" Column(well) #> [1] \"14\" Column(Well(\"C04\")) #> [1] \"04\" nextWell(Well(\"A24\")) #> B01 (384-well format)"},{"path":"oist.github.io/topcorneR/articles/PlateClasses.html","id":"plates","dir":"Articles","previous_headings":"","what":"Plates","title":"S4 classes for representing plates","text":"plate object represents physical mutliwell plate may filled liquids. addition format, dead volume property used calculate possible anymore draw liquid well, maximal volume property used calculate possible anymore add liquid well. properties can left unspecified plate representation theoretical purposes . volumes expressed nanoliters. function PlateTypeToWellNames enumerates names wells plate. filter function, setWell, provided add contents plate. contents plate can extracted converting Plate objects base class, DataFrame. head() function automagically. Note setting reagent overrides volume, setting another reagent reset previous one. sourceReagent function reports reagents found whole plate one wells. Conversely, plateWellVolume reports volume well one reagents. Finally, starting A01 arbitrary location, possible find next well containing given reagent.","code":"(plate <- Plate(\"96\", deadVolume = 1e4, maxVolume = 1e5)) #> A Plate with data about 96 wells (dead volume: 10000; max volume: 1e+05). Plate(\"384\") #> A Plate with data about 384 wells (dead volume: unspecified; max volume: unspecified). PlateTypeToWellNames(\"96\") |> head(13) #>  [1] \"A01\" \"A02\" \"A03\" \"A04\" \"A05\" \"A06\" \"A07\" \"A08\" \"A09\" \"A10\" \"A11\" \"A12\" #> [13] \"B01\" plate <- plate |>   setWell(Well(\"A01\"), \"dNTP\", 1e5) |>   setWell(Well(\"A02\"), \"DMSO\", 1e5) plate |> DataFrame() |> head() #> DataFrame with 6 rows and 2 columns #>          dNTP      DMSO #>     <numeric> <numeric> #> A01     1e+05        NA #> A02        NA     1e+05 #> A03        NA        NA #> A04        NA        NA #> A05        NA        NA #> A06        NA        NA head(plate) #> DataFrame with 6 rows and 2 columns #>          dNTP      DMSO #>     <numeric> <numeric> #> A01     1e+05        NA #> A02        NA     1e+05 #> A03        NA        NA #> A04        NA        NA #> A05        NA        NA #> A06        NA        NA plate |> setWell(Well(\"A01\"), \"dNTP\", 1e4) |> head(3) #> DataFrame with 3 rows and 2 columns #>          dNTP      DMSO #>     <numeric> <numeric> #> A01     10000        NA #> A02        NA     1e+05 #> A03        NA        NA plate |> setWell(Well(\"A01\"), \"DMSO\", 1e4) |> head(3) #> DataFrame with 3 rows and 2 columns #>          dNTP      DMSO #>     <numeric> <numeric> #> A01     1e+05     1e+04 #> A02        NA     1e+05 #> A03        NA        NA sourceReagent(plate) #> [1] \"dNTP\" \"DMSO\" sourceReagent(plate, Well(\"A02\")) #> [1] \"DMSO\" plate <- plate |>   setWell(Well(\"A03\"), \"DMSO\", 1e4) |>   setWell(Well(\"A03\"), \"H2O\", 1e4) plateWellVolume(plate, Well(\"A03\")) #> [1] 20000 plateWellVolume(plate, Well(\"A03\"), \"DMSO\") #> [1] 10000 seekReagent(plate, \"H2O\") #> A03 (96-well format)"},{"path":[]},{"path":"oist.github.io/topcorneR/articles/PlateClasses.html","id":"conventions","dir":"Articles","previous_headings":"For developers","what":"Conventions","title":"S4 classes for representing plates","text":"Class names start capital letters. Constructor functions name class.","code":""},{"path":"oist.github.io/topcorneR/articles/XmasTree.html","id":"result","dir":"Articles","previous_headings":"","what":"Result","title":"Let's make a Christmas tree!","text":"ran transfer February 2018 demo RIKEN. image Let’s see prepared!","code":""},{"path":"oist.github.io/topcorneR/articles/XmasTree.html","id":"planning-the-result","dir":"Articles","previous_headings":"","what":"Planning the result","title":"Let's make a Christmas tree!","text":"First, let’s create Plate object represents expected result transfer.","code":"planPlate <- Plate(\"384\")"},{"path":"oist.github.io/topcorneR/articles/XmasTree.html","id":"our-tree-has-a-stem","dir":"Articles","previous_headings":"Planning the result","what":"Our tree has a stem, …","title":"Let's make a Christmas tree!","text":"","code":"planPlate <- set_block(planPlate, \"H21~I24\", \"stem\", 1000)"},{"path":"oist.github.io/topcorneR/articles/XmasTree.html","id":"and-green-leaves","dir":"Articles","previous_headings":"Planning the result","what":"… and green leaves …","title":"Let's make a Christmas tree!","text":"","code":"planPlate <- planPlate |>   set_block(\"B19~O20\", \"leaves\", 1000) |>   set_block(\"C17~N18\", \"leaves\", 1000) |>   set_block(\"D15~M16\", \"leaves\", 1000) |>   set_block(\"E13~L14\", \"leaves\", 1000) |>   set_block(\"F09~K12\", \"leaves\", 1000) |>   set_block(\"G05~J08\", \"leaves\", 1000) |>   set_block(\"H02~I04\", \"leaves\", 1000)"},{"path":"oist.github.io/topcorneR/articles/XmasTree.html","id":"and-is-decorated-with-balls-","dir":"Articles","previous_headings":"Planning the result","what":"… and is decorated with balls.","title":"Let's make a Christmas tree!","text":"","code":"planPlate <- planPlate |>   set_block(\"G05\", \"balls\", 1000) |>   set_block(\"J08\", \"balls\", 1000) |>   set_block(\"F13\", \"balls\", 1000) |>   set_block(\"J12\", \"balls\", 1000) |>   set_block(\"I17\", \"balls\", 1000) |>   set_block(\"E18\", \"balls\", 1000) |>   set_block(\"M16\", \"balls\", 1000)  # Remove leaves where balls are planPlate[!is.na(planPlate$balls),\"leaves\"] <- NA"},{"path":"oist.github.io/topcorneR/articles/XmasTree.html","id":"lets-visualise-the-plate-object","dir":"Articles","previous_headings":"Planning the result","what":"Let’s visualise the Plate object","title":"Let's make a Christmas tree!","text":"","code":"plateMap <- function(plate, x, title) {   platetools::raw_map(plate[[x]], well=rownames(plate), plate=\"384\") +   ggplot2::ggtitle(title) } (plot_stem   <- plateMap(planPlate, \"stem\",   \"stem\")) (plot_leaves <- plateMap(planPlate, \"leaves\", \"leaves\")) (plot_balls  <- plateMap(planPlate, \"balls\",  \"balls\")) plateMap_all <- function(plate) {   x <- lapply(colnames(plate), function(x) ifelse(is.na(plate[,x]), \"\", x))   names(x) <- colnames(plate)   x <- as.data.frame(x)   x <- apply( x, 1             , function(x)                 if(all(x==\"\")) {                   NA                 } else {                   paste(unique(x[x!=\"\"]), collapse=\",\")                 })   platetools::raw_map(x, well=rownames(plate), plate=\"384\") } plateMap_all(planPlate)"},{"path":"oist.github.io/topcorneR/articles/XmasTree.html","id":"source-plate-layout","dir":"Articles","previous_headings":"","what":"Source plate layout","title":"Let's make a Christmas tree!","text":"ink transferred source plate 384-well format. needs green ink leaves red brown ink balls stem, one well containing green ink.","code":"colSums(as.data.frame(planPlate)[,c(\"stem\", \"leaves\", \"balls\")], na.rm = TRUE) #>   stem leaves  balls  #>   8000 127000   7000 sourcePlate <- Plate(\"384\", deadVolume = 1e4, maxVolume = 1e5) sourcePlate <- sourcePlate |>   set_block(  \"A01\",   \"stem\",   20000) |>   set_block(\"A02~A04\", \"leaves\", 60000) |>   set_block(  \"A05\",   \"balls\",  20000) plateMap_all(sourcePlate)"},{"path":"oist.github.io/topcorneR/articles/XmasTree.html","id":"plan-the-transfer","dir":"Articles","previous_headings":"","what":"Plan the transfer","title":"Let's make a Christmas tree!","text":"Next, let’s plan transfer!","code":"destPlate   <- Plate(\"384\", deadVolume = 1e4, maxVolume = 1e5)  echo <- planTransfers(sourcePlate, destPlate, planPlate) echo #> A 525 Echo machine: #>   Source plate:      A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05). #>   Destination plate: A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05). #> Transducer at the following coordinates: #>   Source:      A05 #>   Destination: M16 #> 142 elements in the log. transfers <- showLogs(echo) head(transfers) #>   from  to  vol what #> 1  A01 H21 1000 stem #> 2  A01 H22 1000 stem #> 3  A01 H23 1000 stem #> 4  A01 H24 1000 stem #> 5  A01 I21 1000 stem #> 6  A01 I22 1000 stem ## We can export the transfer log as a CSV file to be loaded in the Echo machine. # write.table( exportLogs(echo), file = \"Xmas.csv\" #            , quote = FALSE, row.names = FALSE, col.names = TRUE, sep = \",\")"},{"path":"oist.github.io/topcorneR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charles Plessy. Author, maintainer.","code":""},{"path":"oist.github.io/topcorneR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Plessy C (2023). topcorneR: Plan high-throughput liquid transfers. https://oist.github.io/topcorneR, https://github.com/oist/topcorneR.","code":"@Manual{,   title = {topcorneR: Plan high-throughput liquid transfers},   author = {Charles Plessy},   year = {2023},   note = {https://oist.github.io/topcorneR, https://github.com/oist/topcorneR}, }"},{"path":"oist.github.io/topcorneR/index.html","id":"topcorner","dir":"","previous_headings":"","what":"Plan high-throughput liquid transfers","title":"Plan high-throughput liquid transfers","text":"goal topcorneR prepare liquid transfer sheets instruments Echo (Labcyte, now Beckman) -DOT (CELLINK). image","code":""},{"path":"oist.github.io/topcorneR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Plan high-throughput liquid transfers","text":"can install development version topcorneR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"oist/topcorneR\")"},{"path":"oist.github.io/topcorneR/reference/Echo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Echo state — Echo-class","title":"Echo state — Echo-class","text":"Objects class represent state Echo machine loaded source destination plate, transducer given position.","code":""},{"path":"oist.github.io/topcorneR/reference/Echo-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Echo state — Echo-class","text":"","code":"# S4 method for Echo as.character(x)  # S4 method for Echo show(object)"},{"path":"oist.github.io/topcorneR/reference/Echo-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Echo state — Echo-class","text":"x Echo object. object Echo object.","code":""},{"path":"oist.github.io/topcorneR/reference/Echo-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Echo state — Echo-class","text":"model echo machine determines resolution liquid transfers: 2.5 nL increments “555” 25 nL increments “525”.","code":""},{"path":"oist.github.io/topcorneR/reference/Echo-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Echo state — Echo-class","text":"source source Plate. destination destination Plate. transducer Transducer state. model model Echo machine. log log transfers","code":""},{"path":"oist.github.io/topcorneR/reference/Echo-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Echo state — Echo-class","text":"","code":"plate <- Plate( type       =   \"384\"               , deadVolume =  10000               , maxVolume  = 100000)  transducer <- Transducer( source      = Well(\"A01\")                         , destination = Well(\"A01\", plateFormat = \"96\"))  echo <- Echo( source      = plate             , destination = plate             , transducer  = transducer             , model       = \"525\") echo #> A 525 Echo machine: #>   Source plate:      A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05). #>   Destination plate: A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05). #> Transducer at the following coordinates: #>   Source:      A01 #>   Destination: A01 #> 0 elements in the log."},{"path":"oist.github.io/topcorneR/reference/N.html","id":null,"dir":"Reference","previous_headings":"","what":"Avogadro's constant — N","title":"Avogadro's constant — N","text":"Number molecules mole.  exported, made available ::: operator convenience.","code":""},{"path":"oist.github.io/topcorneR/reference/N.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Avogadro's constant — N","text":"","code":"N"},{"path":"oist.github.io/topcorneR/reference/N.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Avogadro's constant — N","text":"object class numeric length 1.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/N.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Avogadro's constant — N","text":"","code":"topcorneR:::N #> [1] 6.022141e+23 prettyNum(topcorneR:::N, digits = 9) #> [1] \"6.02214076e+23\""},{"path":"oist.github.io/topcorneR/reference/Plate-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A multiwell plate — Plate-class","title":"A multiwell plate — Plate-class","text":"Objects class represent multiwell plate.","code":""},{"path":"oist.github.io/topcorneR/reference/Plate-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A multiwell plate — Plate-class","text":"","code":"# S4 method for Plate head(x, n = 6L, ...)  # S4 method for Plate as.character(x)  # S4 method for Plate show(object)"},{"path":"oist.github.io/topcorneR/reference/Plate-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A multiwell plate — Plate-class","text":"x Plate object. n number wells displayed. ... arguments passed methods. object Plate object","code":""},{"path":"oist.github.io/topcorneR/reference/Plate-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A multiwell plate — Plate-class","text":"type plate type \"384\", \"96\", etc.` deadVolume dead volume wells plate. maxVolume maximum volume wells plate.","code":""},{"path":"oist.github.io/topcorneR/reference/Plate-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A multiwell plate — Plate-class","text":"","code":"plate <- Plate( type       = \"384\"               , deadVolume = 10000               , maxVolume  = 100000) plate #> A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05)."},{"path":"oist.github.io/topcorneR/reference/PlateTypeToWellNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Well names of plate type — PlateTypeToWellNames","title":"Well names of plate type — PlateTypeToWellNames","text":"Lists well names known well plate format, left right top bottom.","code":""},{"path":"oist.github.io/topcorneR/reference/PlateTypeToWellNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Well names of plate type — PlateTypeToWellNames","text":"","code":"PlateTypeToWellNames(type = c(\"96\", \"384\"))"},{"path":"oist.github.io/topcorneR/reference/PlateTypeToWellNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Well names of plate type — PlateTypeToWellNames","text":"type name plate type (character)","code":""},{"path":"oist.github.io/topcorneR/reference/PlateTypeToWellNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Well names of plate type — PlateTypeToWellNames","text":"Returns character vector well names.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/PlateTypeToWellNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Well names of plate type — PlateTypeToWellNames","text":"","code":"PlateTypeToWellNames(\"96\") #>  [1] \"A01\" \"A02\" \"A03\" \"A04\" \"A05\" \"A06\" \"A07\" \"A08\" \"A09\" \"A10\" \"A11\" \"A12\" #> [13] \"B01\" \"B02\" \"B03\" \"B04\" \"B05\" \"B06\" \"B07\" \"B08\" \"B09\" \"B10\" \"B11\" \"B12\" #> [25] \"C01\" \"C02\" \"C03\" \"C04\" \"C05\" \"C06\" \"C07\" \"C08\" \"C09\" \"C10\" \"C11\" \"C12\" #> [37] \"D01\" \"D02\" \"D03\" \"D04\" \"D05\" \"D06\" \"D07\" \"D08\" \"D09\" \"D10\" \"D11\" \"D12\" #> [49] \"E01\" \"E02\" \"E03\" \"E04\" \"E05\" \"E06\" \"E07\" \"E08\" \"E09\" \"E10\" \"E11\" \"E12\" #> [61] \"F01\" \"F02\" \"F03\" \"F04\" \"F05\" \"F06\" \"F07\" \"F08\" \"F09\" \"F10\" \"F11\" \"F12\" #> [73] \"G01\" \"G02\" \"G03\" \"G04\" \"G05\" \"G06\" \"G07\" \"G08\" \"G09\" \"G10\" \"G11\" \"G12\" #> [85] \"H01\" \"H02\" \"H03\" \"H04\" \"H05\" \"H06\" \"H07\" \"H08\" \"H09\" \"H10\" \"H11\" \"H12\" PlateTypeToWellNames(\"384\") #>   [1] \"A01\" \"A02\" \"A03\" \"A04\" \"A05\" \"A06\" \"A07\" \"A08\" \"A09\" \"A10\" \"A11\" \"A12\" #>  [13] \"A13\" \"A14\" \"A15\" \"A16\" \"A17\" \"A18\" \"A19\" \"A20\" \"A21\" \"A22\" \"A23\" \"A24\" #>  [25] \"B01\" \"B02\" \"B03\" \"B04\" \"B05\" \"B06\" \"B07\" \"B08\" \"B09\" \"B10\" \"B11\" \"B12\" #>  [37] \"B13\" \"B14\" \"B15\" \"B16\" \"B17\" \"B18\" \"B19\" \"B20\" \"B21\" \"B22\" \"B23\" \"B24\" #>  [49] \"C01\" \"C02\" \"C03\" \"C04\" \"C05\" \"C06\" \"C07\" \"C08\" \"C09\" \"C10\" \"C11\" \"C12\" #>  [61] \"C13\" \"C14\" \"C15\" \"C16\" \"C17\" \"C18\" \"C19\" \"C20\" \"C21\" \"C22\" \"C23\" \"C24\" #>  [73] \"D01\" \"D02\" \"D03\" \"D04\" \"D05\" \"D06\" \"D07\" \"D08\" \"D09\" \"D10\" \"D11\" \"D12\" #>  [85] \"D13\" \"D14\" \"D15\" \"D16\" \"D17\" \"D18\" \"D19\" \"D20\" \"D21\" \"D22\" \"D23\" \"D24\" #>  [97] \"E01\" \"E02\" \"E03\" \"E04\" \"E05\" \"E06\" \"E07\" \"E08\" \"E09\" \"E10\" \"E11\" \"E12\" #> [109] \"E13\" \"E14\" \"E15\" \"E16\" \"E17\" \"E18\" \"E19\" \"E20\" \"E21\" \"E22\" \"E23\" \"E24\" #> [121] \"F01\" \"F02\" \"F03\" \"F04\" \"F05\" \"F06\" \"F07\" \"F08\" \"F09\" \"F10\" \"F11\" \"F12\" #> [133] \"F13\" \"F14\" \"F15\" \"F16\" \"F17\" \"F18\" \"F19\" \"F20\" \"F21\" \"F22\" \"F23\" \"F24\" #> [145] \"G01\" \"G02\" \"G03\" \"G04\" \"G05\" \"G06\" \"G07\" \"G08\" \"G09\" \"G10\" \"G11\" \"G12\" #> [157] \"G13\" \"G14\" \"G15\" \"G16\" \"G17\" \"G18\" \"G19\" \"G20\" \"G21\" \"G22\" \"G23\" \"G24\" #> [169] \"H01\" \"H02\" \"H03\" \"H04\" \"H05\" \"H06\" \"H07\" \"H08\" \"H09\" \"H10\" \"H11\" \"H12\" #> [181] \"H13\" \"H14\" \"H15\" \"H16\" \"H17\" \"H18\" \"H19\" \"H20\" \"H21\" \"H22\" \"H23\" \"H24\" #> [193] \"I01\" \"I02\" \"I03\" \"I04\" \"I05\" \"I06\" \"I07\" \"I08\" \"I09\" \"I10\" \"I11\" \"I12\" #> [205] \"I13\" \"I14\" \"I15\" \"I16\" \"I17\" \"I18\" \"I19\" \"I20\" \"I21\" \"I22\" \"I23\" \"I24\" #> [217] \"J01\" \"J02\" \"J03\" \"J04\" \"J05\" \"J06\" \"J07\" \"J08\" \"J09\" \"J10\" \"J11\" \"J12\" #> [229] \"J13\" \"J14\" \"J15\" \"J16\" \"J17\" \"J18\" \"J19\" \"J20\" \"J21\" \"J22\" \"J23\" \"J24\" #> [241] \"K01\" \"K02\" \"K03\" \"K04\" \"K05\" \"K06\" \"K07\" \"K08\" \"K09\" \"K10\" \"K11\" \"K12\" #> [253] \"K13\" \"K14\" \"K15\" \"K16\" \"K17\" \"K18\" \"K19\" \"K20\" \"K21\" \"K22\" \"K23\" \"K24\" #> [265] \"L01\" \"L02\" \"L03\" \"L04\" \"L05\" \"L06\" \"L07\" \"L08\" \"L09\" \"L10\" \"L11\" \"L12\" #> [277] \"L13\" \"L14\" \"L15\" \"L16\" \"L17\" \"L18\" \"L19\" \"L20\" \"L21\" \"L22\" \"L23\" \"L24\" #> [289] \"M01\" \"M02\" \"M03\" \"M04\" \"M05\" \"M06\" \"M07\" \"M08\" \"M09\" \"M10\" \"M11\" \"M12\" #> [301] \"M13\" \"M14\" \"M15\" \"M16\" \"M17\" \"M18\" \"M19\" \"M20\" \"M21\" \"M22\" \"M23\" \"M24\" #> [313] \"N01\" \"N02\" \"N03\" \"N04\" \"N05\" \"N06\" \"N07\" \"N08\" \"N09\" \"N10\" \"N11\" \"N12\" #> [325] \"N13\" \"N14\" \"N15\" \"N16\" \"N17\" \"N18\" \"N19\" \"N20\" \"N21\" \"N22\" \"N23\" \"N24\" #> [337] \"O01\" \"O02\" \"O03\" \"O04\" \"O05\" \"O06\" \"O07\" \"O08\" \"O09\" \"O10\" \"O11\" \"O12\" #> [349] \"O13\" \"O14\" \"O15\" \"O16\" \"O17\" \"O18\" \"O19\" \"O20\" \"O21\" \"O22\" \"O23\" \"O24\" #> [361] \"P01\" \"P02\" \"P03\" \"P04\" \"P05\" \"P06\" \"P07\" \"P08\" \"P09\" \"P10\" \"P11\" \"P12\" #> [373] \"P13\" \"P14\" \"P15\" \"P16\" \"P17\" \"P18\" \"P19\" \"P20\" \"P21\" \"P22\" \"P23\" \"P24\""},{"path":"oist.github.io/topcorneR/reference/Transducer.html","id":null,"dir":"Reference","previous_headings":"","what":"Transducer state — Transducer-class","title":"Transducer state — Transducer-class","text":"Objects class represent state transduction system Echo machine: position transducer coordinate system source plate, position target plate top transducer.","code":""},{"path":"oist.github.io/topcorneR/reference/Transducer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transducer state — Transducer-class","text":"","code":"# S4 method for Transducer as.character(x)  # S4 method for Transducer show(object)"},{"path":"oist.github.io/topcorneR/reference/Transducer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transducer state — Transducer-class","text":"x Transducer object object Transducer object.","code":""},{"path":"oist.github.io/topcorneR/reference/Transducer.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Transducer state — Transducer-class","text":"source Well source plate. destination Well destination plate.","code":""},{"path":"oist.github.io/topcorneR/reference/Transducer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transducer state — Transducer-class","text":"","code":"Transducer(   source      = Well(\"A01\"),   destination = Well(\"A01\", plateFormat = \"96\")) #> Transducer at the following coordinates: #>   Source:      A01 #>   Destination: A01"},{"path":"oist.github.io/topcorneR/reference/Well-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The row of a well — as.character,Well-method","title":"The row of a well — as.character,Well-method","text":"Given well object, tells row well . Given well object, tells column well .","code":""},{"path":"oist.github.io/topcorneR/reference/Well-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The row of a well — as.character,Well-method","text":"","code":"# S4 method for Well as.character(x)  # S4 method for Well show(object)  Row(object)  # S4 method for Well Row(object)  Column(object)  # S4 method for Well Column(object)"},{"path":"oist.github.io/topcorneR/reference/Well-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The row of a well — as.character,Well-method","text":"x Well object object Well object column coordinates extracted.","code":""},{"path":"oist.github.io/topcorneR/reference/Well-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The row of a well — as.character,Well-method","text":"row name character format. column name character format","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/Well-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The row of a well — as.character,Well-method","text":"","code":"well <- Well(well = \"A01\", plateFormat = \"384\") Row(well) #> [1] \"A\"  well <- Well(\"A01\") Column(well) #> [1] \"01\""},{"path":"oist.github.io/topcorneR/reference/Well.html","id":null,"dir":"Reference","previous_headings":"","what":"Well coordinates — Well-class","title":"Well coordinates — Well-class","text":"Objects class represent position microwell plate.  class exists validity coordinates can tested (instance M16 rejected 96-well plate).","code":""},{"path":"oist.github.io/topcorneR/reference/Well.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Well coordinates — Well-class","text":"well position microwell plate. plateFormat plate format.","code":""},{"path":"oist.github.io/topcorneR/reference/Well.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Well coordinates — Well-class","text":"","code":"well <- Well(\"A01\", plateFormat = \"384\") well #> A01 (384-well format) as.character(well) #> [1] \"A01\" show(well) #> A01 (384-well format) Row(well) #> [1] \"A\" Column(well) #> [1] \"01\""},{"path":"oist.github.io/topcorneR/reference/calc_qPCR_TM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute melting temperature from raw data — calc_qPCR_TM","title":"Compute melting temperature from raw data — calc_qPCR_TM","text":"Although qPCR machines output melting temperatures report files, also possible compute using exported raw data.  function automates running qpcR::meltcurve() computation quiet way.","code":""},{"path":"oist.github.io/topcorneR/reference/calc_qPCR_TM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute melting temperature from raw data — calc_qPCR_TM","text":"","code":"calc_qPCR_TM(mlt, cut.Area = 1)"},{"path":"oist.github.io/topcorneR/reference/calc_qPCR_TM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute melting temperature from raw data — calc_qPCR_TM","text":"mlt table providing raw data loaded load_qPCR_meltcurve(). cut.Area Parameter passed directly qpcR::meltcurve().","code":""},{"path":"oist.github.io/topcorneR/reference/calc_qPCR_TM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute melting temperature from raw data — calc_qPCR_TM","text":"vector melting temperatures order wells mlt table.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/calc_qPCR_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute CT and amplification efficiency from raw data — calc_qPCR_mod","title":"Compute CT and amplification efficiency from raw data — calc_qPCR_mod","text":"Compute CT amplification efficiency raw data","code":""},{"path":"oist.github.io/topcorneR/reference/calc_qPCR_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute CT and amplification efficiency from raw data — calc_qPCR_mod","text":"","code":"calc_qPCR_mod(fluo)"},{"path":"oist.github.io/topcorneR/reference/calc_qPCR_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute CT and amplification efficiency from raw data — calc_qPCR_mod","text":"fluo table providing raw data loaded load_qPCR_raw.","code":""},{"path":"oist.github.io/topcorneR/reference/calc_qPCR_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute CT and amplification efficiency from raw data — calc_qPCR_mod","text":"tibble providing Eff (efficiency), cpD1 (CT), cpD2 another computation CT) calculated qpcR::efficiency function.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/changeWell.html","id":null,"dir":"Reference","previous_headings":"","what":"Change a well position — changeWell","title":"Change a well position — changeWell","text":"Makes sure updated well position plate format original one.","code":""},{"path":"oist.github.io/topcorneR/reference/changeWell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change a well position — changeWell","text":"","code":"changeWell(from, to)  # S4 method for Well,Well changeWell(from, to)"},{"path":"oist.github.io/topcorneR/reference/changeWell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change a well position — changeWell","text":"Well object. Well object.","code":""},{"path":"oist.github.io/topcorneR/reference/changeWell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change a well position — changeWell","text":"Returns Well object.","code":""},{"path":"oist.github.io/topcorneR/reference/changeWell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change a well position — changeWell","text":"","code":"changeWell( Well(\"A01\")           , Well(\"B03\", plateFormat = \"undefined\")) #> B03 (384-well format)"},{"path":"oist.github.io/topcorneR/reference/exampleEcho.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Echo object — exampleEcho","title":"Example Echo object — exampleEcho","text":"Echo object represents Echo 525 machine loaded 384-well source plate examplePlate object 96-well destination plate, transducer ready transfer source well A01 destination well A01.","code":""},{"path":"oist.github.io/topcorneR/reference/exampleEcho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Echo object — exampleEcho","text":"","code":"exampleEcho"},{"path":"oist.github.io/topcorneR/reference/exampleEcho.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Echo object — exampleEcho","text":"object class Echo length 1.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/examplePlate.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Plate object — examplePlate","title":"Example Plate object — examplePlate","text":"Plate represents 384-well plate dead volume 10 microliters maximum volume 100 microliters.  filled reagents three first wells.","code":""},{"path":"oist.github.io/topcorneR/reference/examplePlate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Plate object — examplePlate","text":"","code":"examplePlate"},{"path":"oist.github.io/topcorneR/reference/examplePlate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Plate object — examplePlate","text":"object class Plate 384 rows 2 columns.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/exampleTransducer.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Transducer object — exampleTransducer","title":"Example Transducer object — exampleTransducer","text":"Transducer object transfer well A01 source plate 384-well format well A01 destination plate 96-well format.","code":""},{"path":"oist.github.io/topcorneR/reference/exampleTransducer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Transducer object — exampleTransducer","text":"","code":"exampleTransducer"},{"path":"oist.github.io/topcorneR/reference/exampleTransducer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Transducer object — exampleTransducer","text":"object class Transducer length 1.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/load_qPCR.html","id":null,"dir":"Reference","previous_headings":"","what":"Load CT values from qPCR results file — load_qPCR_results","title":"Load CT values from qPCR results file — load_qPCR_results","text":"Loads CT values results file produced real-time quantitative PCR (RT-qPCR) machine.","code":""},{"path":"oist.github.io/topcorneR/reference/load_qPCR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load CT values from qPCR results file — load_qPCR_results","text":"","code":"load_qPCR_results(   file,   expName = NA,   machine = c(NA, \"VIA\", \"QS5\"),   format = \"Excel\",   skip = 43,   n_max = 384 )  load_qPCR_meltcurve(   file,   expName = NA,   machine = c(NA, \"VIA\", \"QS5\"),   format = \"Excel\",   skip = 42 )  load_qPCR_raw(   file,   expName = NA,   machine = c(NA, \"VIA\", \"QS5\"),   format = \"Excel\",   skip = 42,   cycles = 40 )"},{"path":"oist.github.io/topcorneR/reference/load_qPCR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load CT values from qPCR results file — load_qPCR_results","text":"file Path file open. expName name experiment. machine type machine produced results file. format format file.  moment Excel supported. skip number lines skip reading data. n_max number lines read. cycles number PCR cycles.","code":""},{"path":"oist.github.io/topcorneR/reference/load_qPCR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load CT values from qPCR results file — load_qPCR_results","text":"Returns tibble::tibble() object reporting well coordinates, CT value melting temperature computed machine, optionally name experiment.","code":""},{"path":"oist.github.io/topcorneR/reference/load_qPCR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Load CT values from qPCR results file — load_qPCR_results","text":"function needs readxl package.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/load_qPCR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load CT values from qPCR results file — load_qPCR_results","text":"Charles Plessy","code":""},{"path":"oist.github.io/topcorneR/reference/moveTransducer.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the state of the transducer — moveTransducer","title":"Change the state of the transducer — moveTransducer","text":"Moves tranducer new source position, moves destination plate, ","code":""},{"path":"oist.github.io/topcorneR/reference/moveTransducer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the state of the transducer — moveTransducer","text":"","code":"moveTransducer(transducer, source, destination)  # S4 method for Transducer,Well,missing moveTransducer(transducer, source, destination)  # S4 method for Transducer,missing,Well moveTransducer(transducer, source, destination)  # S4 method for Transducer,Well,Well moveTransducer(transducer, source, destination)  # S4 method for Echo,Well,missing moveTransducer(transducer, source, destination)  # S4 method for Echo,missing,Well moveTransducer(transducer, source, destination)  # S4 method for Echo,Well,Well moveTransducer(transducer, source, destination)"},{"path":"oist.github.io/topcorneR/reference/moveTransducer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the state of the transducer — moveTransducer","text":"transducer Transducer object. source Well object. destination Well object.","code":""},{"path":"oist.github.io/topcorneR/reference/moveTransducer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the state of the transducer — moveTransducer","text":"Returns transducer object new state.","code":""},{"path":"oist.github.io/topcorneR/reference/moveTransducer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the state of the transducer — moveTransducer","text":"","code":"moveTransducer(exampleTransducer, Well(\"A02\")) #> Transducer at the following coordinates: #>   Source:      A02 #>   Destination: A01 moveTransducer(exampleTransducer, destination = Well(\"A02\", plateFormat = \"96\")) #> Transducer at the following coordinates: #>   Source:      A01 #>   Destination: A02 moveTransducer( exampleTransducer               , source      = Well(\"A02\")               , destination = Well(\"A02\", plateFormat = \"96\")) #> Transducer at the following coordinates: #>   Source:      A02 #>   Destination: A02  moveTransducer(exampleEcho, source = Well(\"A02\")) #> A 525 Echo machine: #>   Source plate:      A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05). #>   Destination plate: A Plate with data about 96 wells (dead volume: 10000; max volume: 1e+05). #> Transducer at the following coordinates: #>   Source:      A02 #>   Destination: A01 #> 3 elements in the log.  moveTransducer(exampleEcho, destination = Well(\"A02\", plateFormat = \"96\")) #> A 525 Echo machine: #>   Source plate:      A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05). #>   Destination plate: A Plate with data about 96 wells (dead volume: 10000; max volume: 1e+05). #> Transducer at the following coordinates: #>   Source:      A03 #>   Destination: A02 #> 3 elements in the log.  moveTransducer( exampleEcho               , source      = Well(\"A02\")               , destination = Well(\"A02\", plateFormat = \"96\")) #> A 525 Echo machine: #>   Source plate:      A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05). #>   Destination plate: A Plate with data about 96 wells (dead volume: 10000; max volume: 1e+05). #> Transducer at the following coordinates: #>   Source:      A02 #>   Destination: A02 #> 3 elements in the log."},{"path":"oist.github.io/topcorneR/reference/nextWell.html","id":null,"dir":"Reference","previous_headings":"","what":"Move to the next well — nextWell","title":"Move to the next well — nextWell","text":"left right, , give position next well.","code":""},{"path":"oist.github.io/topcorneR/reference/nextWell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move to the next well — nextWell","text":"","code":"nextWell(well)  # S4 method for Well nextWell(well)"},{"path":"oist.github.io/topcorneR/reference/nextWell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move to the next well — nextWell","text":"well Well object.","code":""},{"path":"oist.github.io/topcorneR/reference/nextWell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move to the next well — nextWell","text":"Well object.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/nextWell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move to the next well — nextWell","text":"","code":"nextWell(Well(\"A12\", plateFormat = \"96\")) #> B01 (96-well format) nextWell(Well(\"A12\", plateFormat = \"384\")) #> A13 (384-well format) nextWell(Well(\"A24\", plateFormat = \"384\")) #> B01 (384-well format)"},{"path":"oist.github.io/topcorneR/reference/planTransfers.html","id":null,"dir":"Reference","previous_headings":"","what":"Plan Echo transfers — planTransfers","title":"Plan Echo transfers — planTransfers","text":"Given source plate, target plate representation filled target plate, calculate liquid transfers necessary perform filling.","code":""},{"path":"oist.github.io/topcorneR/reference/planTransfers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plan Echo transfers — planTransfers","text":"","code":"planTransfers(source, destination, plan, model = \"525\")"},{"path":"oist.github.io/topcorneR/reference/planTransfers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plan Echo transfers — planTransfers","text":"source source Plate. destination destination Plate. plan Plate representing additions destination plate. model Echo model use.","code":""},{"path":"oist.github.io/topcorneR/reference/planTransfers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plan Echo transfers — planTransfers","text":"transfer log","code":""},{"path":"oist.github.io/topcorneR/reference/planTransfers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plan Echo transfers — planTransfers","text":"reagent plan plate transferred one .  reagent selected, source well sought transfer transducer moved .","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/planTransfers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plan Echo transfers — planTransfers","text":"","code":"sourcePlate <- examplePlate head(sourcePlate) #> DataFrame with 6 rows and 2 columns #>          dNTP    buffer #>     <numeric> <numeric> #> A01     1e+05        NA #> A02     1e+05        NA #> A03        NA     1e+05 #> A04        NA        NA #> A05        NA        NA #> A06        NA        NA  planPlate <- Plate(\"384\") |>   setWell(Well(\"A01\"), \"dNTP\",   50) |>   setWell(Well(\"A02\"), \"dNTP\",  100) |>   setWell(Well(\"A01\"), \"buffer\", 50) head(planPlate) #> DataFrame with 6 rows and 2 columns #>          dNTP    buffer #>     <numeric> <numeric> #> A01        50        50 #> A02       100        NA #> A03        NA        NA #> A04        NA        NA #> A05        NA        NA #> A06        NA        NA  destinationPlate <- Plate(\"384\", deadVolume = 1e4, maxVolume = 1e5)  echo <- planTransfers(sourcePlate, destinationPlate, planPlate) echo #> A 525 Echo machine: #>   Source plate:      A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05). #>   Destination plate: A Plate with data about 384 wells (dead volume: 10000; max volume: 1e+05). #> Transducer at the following coordinates: #>   Source:      A03 #>   Destination: A01 #> 3 elements in the log. echo |> showLogs() #>   from  to vol   what #> 1  A01 A01  50   dNTP #> 2  A01 A02 100   dNTP #> 3  A03 A01  50 buffer"},{"path":"oist.github.io/topcorneR/reference/plateMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the contents of a plate — plateMap","title":"Plot the contents of a plate — plateMap","text":"Plot contents plate","code":""},{"path":"oist.github.io/topcorneR/reference/plateMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the contents of a plate — plateMap","text":"","code":"plateMap(plate, x, title = x)  plateMap_all(plate)"},{"path":"oist.github.io/topcorneR/reference/plateMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the contents of a plate — plateMap","text":"plate Plate object. x One reagent plate. title title plot.","code":""},{"path":"oist.github.io/topcorneR/reference/plateMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the contents of a plate — plateMap","text":"ggplot2::ggplot object.","code":""},{"path":"oist.github.io/topcorneR/reference/plateMap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot the contents of a plate — plateMap","text":"Charles Plessy","code":""},{"path":"oist.github.io/topcorneR/reference/plateWellVolume.html","id":null,"dir":"Reference","previous_headings":"","what":"Get reagent volume — plateWellVolume","title":"Get reagent volume — plateWellVolume","text":"given plate, get volume reagent contained given well.","code":""},{"path":"oist.github.io/topcorneR/reference/plateWellVolume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get reagent volume — plateWellVolume","text":"","code":"plateWellVolume(plate, well, what)  # S4 method for Plate,Well,missing plateWellVolume(plate, well, what)  # S4 method for Plate,Well,character plateWellVolume(plate, well, what)"},{"path":"oist.github.io/topcorneR/reference/plateWellVolume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get reagent volume — plateWellVolume","text":"plate Plate object. well Well object. name reagent.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/plateWellVolume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get reagent volume — plateWellVolume","text":"","code":"destPlate <- Plate( type       = \"384\"                   , deadVolume = 10000                   , maxVolume  = 100000) destPlate <- destPlate |>   setWell(Well(\"A01\"), \"dNTP\",   50) |>   setWell(Well(\"A02\"), \"dNTP\",  100) |>   setWell(Well(\"A01\"), \"buffer\", 50)  destPlate |> plateWellVolume(Well(\"A01\")) #> [1] 100 destPlate |> plateWellVolume(Well(\"A01\"), \"dNTP\") #> [1] 50 destPlate |> plateWellVolume(Well(\"A01\"), \"buffer\") #> [1] 50  destPlate |> plateWellVolume(Well(\"A02\")) #> [1] 100 destPlate |> plateWellVolume(Well(\"A02\"), \"dNTP\") #> [1] 100 destPlate |> plateWellVolume(Well(\"A02\"), \"buffer\") #> [1] 0"},{"path":"oist.github.io/topcorneR/reference/seekReagent.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a well that can provide enough reagent — seekReagent","title":"Find a well that can provide enough reagent — seekReagent","text":"Given Plate object, check reagent available, yes, well.  search can restricted exclude wells positioned (alphanumeric order) arbitrary position, avoid backtracking wells already emptired.","code":""},{"path":"oist.github.io/topcorneR/reference/seekReagent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a well that can provide enough reagent — seekReagent","text":"","code":"seekReagent(object, reagent, start)  # S4 method for Plate,character,Well seekReagent(object, reagent, start)  # S4 method for Plate,character,missing seekReagent(object, reagent, start)  # S4 method for Echo,character,Well seekReagent(object, reagent, start)  # S4 method for Echo,character,missing seekReagent(object, reagent, start)"},{"path":"oist.github.io/topcorneR/reference/seekReagent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a well that can provide enough reagent — seekReagent","text":"object Plate object. reagent reagent name. start Well object (avoid backtracking).","code":""},{"path":"oist.github.io/topcorneR/reference/seekReagent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a well that can provide enough reagent — seekReagent","text":"Well object.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/seekReagent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a well that can provide enough reagent — seekReagent","text":"","code":"seekReagent(examplePlate, \"buffer\") #> A03 (384-well format)"},{"path":"oist.github.io/topcorneR/reference/setWell.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the contents of a well — setWell","title":"Set the contents of a well — setWell","text":"Set contents well","code":""},{"path":"oist.github.io/topcorneR/reference/setWell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the contents of a well — setWell","text":"","code":"setWell(plate, well, what, volume)  # S4 method for Plate,Well,character,numeric setWell(plate, well, what, volume)  # S4 method for Plate,Well,character,logical setWell(plate, well, what, volume)"},{"path":"oist.github.io/topcorneR/reference/setWell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the contents of a well — setWell","text":"plate Plate object. well Well object. reagent name (character value). volume volume nanoliters (numeric value).","code":""},{"path":"oist.github.io/topcorneR/reference/setWell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the contents of a well — setWell","text":"Returns Plate object.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/setWell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the contents of a well — setWell","text":"","code":"sourcePlate <- Plate(\"384\", deadVolume = 1e4, maxVolume = 1e5) A01 <- Well(\"A01\") sourcePlate <- setWell(sourcePlate, A01, \"dNTP\", 100000) sourcePlate <- setWell(sourcePlate, Well(\"A02\"), \"dNTP\",   100000) sourcePlate <- setWell(sourcePlate, Well(\"A03\"), \"buffer\", 100000) head(sourcePlate) #> DataFrame with 6 rows and 2 columns #>          dNTP    buffer #>     <numeric> <numeric> #> A01     1e+05        NA #> A02     1e+05        NA #> A03        NA     1e+05 #> A04        NA        NA #> A05        NA        NA #> A06        NA        NA"},{"path":"oist.github.io/topcorneR/reference/set_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Set values in rectangular areas of a plate — set_block","title":"Set values in rectangular areas of a plate — set_block","text":"Updates Plate object representing multiwell plate, setting given value wells block list blocks defined well coordinates upper-left bottom-right corners.","code":""},{"path":"oist.github.io/topcorneR/reference/set_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set values in rectangular areas of a plate — set_block","text":"","code":"set_block(plate, block, what, value)  # S4 method for Plate,character,character,numeric set_block(plate, block, what, value)"},{"path":"oist.github.io/topcorneR/reference/set_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set values in rectangular areas of a plate — set_block","text":"plate Plate object representing multiwell plate. block Coordinates rectangular block (“A01~B02”), vector coordinates. reagent name. value value set.","code":""},{"path":"oist.github.io/topcorneR/reference/set_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set values in rectangular areas of a plate — set_block","text":"Returns Plate object, values wells indicated blocks updated.","code":""},{"path":"oist.github.io/topcorneR/reference/set_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set values in rectangular areas of a plate — set_block","text":"function wraps platetools::set_block().","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/set_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set values in rectangular areas of a plate — set_block","text":"","code":"p <- Plate(\"96\") head(p) #> DataFrame with 6 rows and 0 columns  p <- p |>   set_block(c(\"A01~B02\", \"A05~D05\"), \"dNTP\", 0.25) |>   set_block(    \"A03\",               \"dNTP\", 0.50) head(p) #> DataFrame with 6 rows and 1 column #>          dNTP #>     <numeric> #> A01      0.25 #> A02      0.25 #> A03      0.50 #> A04        NA #> A05      0.25 #> A06        NA  # Be careful with the column names p <- set_block(p, \"A01~H12\", \"Mg2+\", 3.0) #> Warning: Column name not syntactically correct.  See “?make.names”. head(p) #> DataFrame with 6 rows and 2 columns #>          dNTP      Mg2. #>     <numeric> <numeric> #> A01      0.25         3 #> A02      0.25         3 #> A03      0.50         3 #> A04        NA         3 #> A05      0.25         3 #> A06        NA         3"},{"path":"oist.github.io/topcorneR/reference/showLogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Show or export transfer logs — showLogs","title":"Show or export transfer logs — showLogs","text":"Extract logs Echo object formats table.  exportLogs function sets column names expected Echo Plate Reformat software discards column.","code":""},{"path":"oist.github.io/topcorneR/reference/showLogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show or export transfer logs — showLogs","text":"","code":"showLogs(echo)  # S4 method for Echo showLogs(echo)  exportLogs(echo)  # S4 method for Echo exportLogs(echo)"},{"path":"oist.github.io/topcorneR/reference/showLogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show or export transfer logs — showLogs","text":"echo Echo object.","code":""},{"path":"oist.github.io/topcorneR/reference/showLogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show or export transfer logs — showLogs","text":"","code":"showLogs(exampleEcho) #>   from  to vol   what #> 1  A01 A01  50   dNTP #> 2  A01 A02 100   dNTP #> 3  A03 A01  50 buffer exportLogs(exampleEcho) #>   Source well Destination well Transfer volume #> 1         A01              A01              50 #> 2         A01              A02             100 #> 3         A03              A01              50"},{"path":"oist.github.io/topcorneR/reference/sourceReagent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get reagent name — sourceReagent","title":"Get reagent name — sourceReagent","text":"source plate, get name reagent contained given well.","code":""},{"path":"oist.github.io/topcorneR/reference/sourceReagent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get reagent name — sourceReagent","text":"","code":"sourceReagent(plate, well)  # S4 method for Plate,Well sourceReagent(plate, well)  # S4 method for Plate,missing sourceReagent(plate, well)"},{"path":"oist.github.io/topcorneR/reference/sourceReagent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get reagent name — sourceReagent","text":"plate Plate object. well Well object.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/sourceReagent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get reagent name — sourceReagent","text":"","code":"sourcePlate <- Plate( type       = \"384\"                     , deadVolume = 10000                     , maxVolume  = 100000)  sourcePlate <- sourcePlate |>   setWell(Well(\"A01\"), \"dNTP\",   100000) |>   setWell(Well(\"A02\"), \"dNTP\",   100000) |>   setWell(Well(\"A03\"), \"buffer\", 100000)  head(sourcePlate) #> DataFrame with 6 rows and 2 columns #>          dNTP    buffer #>     <numeric> <numeric> #> A01     1e+05        NA #> A02     1e+05        NA #> A03        NA     1e+05 #> A04        NA        NA #> A05        NA        NA #> A06        NA        NA  sourcePlate |> sourceReagent(Well(\"A01\")) #> [1] \"dNTP\" sourcePlate |> sourceReagent(Well(\"A03\")) #> [1] \"buffer\" sourcePlate |> sourceReagent() #> [1] \"dNTP\"   \"buffer\""},{"path":"oist.github.io/topcorneR/reference/titration_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Titration curve — titration_curve","title":"Titration curve — titration_curve","text":"Given number steps target maximal volume, function return increasing serie volumes cover range approximately logarithmic progression.  volume can dispensed, guaranteed multiple droplet's volume.  range can forced start zero negative control needed.","code":""},{"path":"oist.github.io/topcorneR/reference/titration_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Titration curve — titration_curve","text":"","code":"titration_curve(steps = 12, maxvol = 1000, dropvolume = 2.5, zero = TRUE)"},{"path":"oist.github.io/topcorneR/reference/titration_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Titration curve — titration_curve","text":"steps number points titration curve. maxvol maximum volume reach. dropvolume volume droplet, nanoliters. zero Start negative control volume zero.","code":""},{"path":"oist.github.io/topcorneR/reference/titration_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Titration curve — titration_curve","text":"numeric vector length steps indicating volumes transfer order cover volume range logarithmic manner.","code":""},{"path":[]},{"path":"oist.github.io/topcorneR/reference/titration_curve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Titration curve — titration_curve","text":"Charles Plessy","code":""},{"path":"oist.github.io/topcorneR/reference/titration_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Titration curve — titration_curve","text":"","code":"titration_curve(12) #>  [1]    0.0    2.5    5.0   10.0   17.5   32.5   55.0  100.0  177.5  315.0 #> [11]  562.5 1000.0 titration_curve(12, zero = FALSE) #>  [1]    2.5    5.0    7.5   15.0   25.0   40.0   70.0  120.0  202.5  345.0 #> [11]  587.5 1000.0 titration_curve(12, dropvolume = 25) #>  [1]    0   25   50   75  100  125  175  250  350  500  700 1000 titration_curve(12, dropvolume = 25, maxvol = 300) #>  [1]   0  25  50  75 100 125 150 175 200 225 250 300"},{"path":"oist.github.io/topcorneR/reference/transfer.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer volume from a source to a destination plate — transfer","title":"Transfer volume from a source to a destination plate — transfer","text":"Reduce volume reagent source plate coordinates transducer, add volume destination plate, register transfer log.","code":""},{"path":"oist.github.io/topcorneR/reference/transfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer volume from a source to a destination plate — transfer","text":"","code":"transfer(echo, volume)  # S4 method for Echo,numeric transfer(echo, volume)"},{"path":"oist.github.io/topcorneR/reference/transfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer volume from a source to a destination plate — transfer","text":"echo Echo object. volume Volume transfer. parameter must correspond column name source plate.","code":""},{"path":"oist.github.io/topcorneR/reference/transfer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer volume from a source to a destination plate — transfer","text":"Returns Echo object source, destination log slots updated.","code":""},{"path":"oist.github.io/topcorneR/reference/transfer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transfer volume from a source to a destination plate — transfer","text":"","code":"sourcePlate <- examplePlate head(sourcePlate) #> DataFrame with 6 rows and 2 columns #>          dNTP    buffer #>     <numeric> <numeric> #> A01     1e+05        NA #> A02     1e+05        NA #> A03        NA     1e+05 #> A04        NA        NA #> A05        NA        NA #> A06        NA        NA  destinationPlate <- Plate(\"96\", deadVolume = 1e4, maxVolume = 1e5)  transducer <- Transducer( source      = Well(\"A01\")                         , destination = Well(\"A01\", plateFormat = \"96\"))  echo <- Echo( source      = sourcePlate             , destination = destinationPlate             , transducer  = transducer             , model       = \"525\")  echo |> showLogs() #> data frame with 0 columns and 0 rows  echo <- echo |>   transfer(10) |>   transfer(10) |>   moveTransducer(destination = Well(\"A02\", plateFormat = \"96\")) |>   transfer(5)  echo |> showLogs() #>   from  to vol what #> 1  A01 A01  10 dNTP #> 2  A01 A01  10 dNTP #> 3  A01 A02   5 dNTP"},{"path":"oist.github.io/topcorneR/reference/validationFunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests the well's row name is valid — validRow","title":"Tests the well's row name is valid — validRow","text":"Tests well's row name valid Tests well's column number valid","code":""},{"path":"oist.github.io/topcorneR/reference/validationFunctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests the well's row name is valid — validRow","text":"","code":"validRow(w)  validColumn(w)"},{"path":"oist.github.io/topcorneR/reference/validationFunctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests the well's row name is valid — validRow","text":"w Well.","code":""},{"path":"oist.github.io/topcorneR/reference/validationFunctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests the well's row name is valid — validRow","text":"TRUE valid, otherwise returns error TRUE valid, otherwise returns error","code":""}]
